type Query {
  loginDeveloper(data: DeveloperLoginInput!): AuthData!
  loginMember(data: MemberLoginInput!): AuthData!
  getAllMembers: [Member!]!
  getAllMembersByPosition(position: ID!): [Member!]!
  getAllPositions: [Position!]!
  # getFirstPollResult: [PollResult!]!
  getFirstPollAllResult: [PollResult!]!
  getSecondPollAllResult: [PollResult!]!
  getPollData: PollData!
  getMemberVoteData: MemberVoteData!
}

type Mutation {
  createMember(data: MemberCreationInput!): MemberCreationMessage!
  createPosition(data: PositionCreationInput!): PositionCreationMessage!
  createVotes(data: [VoteCreationInput!]!): [VoteCreationMessage!]!
  makeAMemberEligible(_id: ID!, position: ID!): Message!
  makeAMemberNotEligible(_id: ID!, position: ID!): Message!
  enableFirstPoll: Message!
  disableFirstPoll: Message!
  enableSecondPoll: Message!
  disableSecondPoll: Message!
}

#type Subscription {
#}

input DeveloperLoginInput {
  email: String!
  password: String!
}

input MemberLoginInput {
  secret: String!
}

input MemberCreationInput {
  secret: String!
  name: String!
  year: Int!
  gender: String!
}

input PositionCreationInput {
  title: String!
  eligible_year: Int!
  eligible_gender: String!
}

input VoteCreationInput {
  position: ID!
  to: ID!
}

type MemberCreationMessage {
  _id: ID!
}

type AuthData {
  _id: ID!
  token: String!
  expiresIn: Int!
}

type Member {
  _id: ID!
  secret: String!
  year: Int!
  gender: String!
  name: String!
  eligible_for: [Position!]!
}

type MemberWithVoteInfo {
  member: Member!
  vote_recieved: Int!
}

type PositionCreationMessage {
  _id: ID!
}

type VoteCreationMessage {
  _id: ID!
}

type Position {
  _id: ID!
  title: String!
  eligible_year: Int!
  eligible_gender: String!
}

type PollResult {
  position: Position!
  eligible_member_infos: [MemberWithVoteInfo!]!
}

type Message {
  msg: String!
}

type PollData {
  is_first_poll_enabled: Boolean!
  is_second_poll_enabled: Boolean!
}

type MemberVoteData {
  is_voted: Boolean!
  current: String!
}
